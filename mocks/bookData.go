// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	book "alta/project2/features/book"

	mock "github.com/stretchr/testify/mock"
)

// BookData is an autogenerated mock type for the DataInterface type
type BookData struct {
	mock.Mock
}

// CreateData provides a mock function with given fields: data, token
func (_m *BookData) CreateData(data book.BookCore, token int) (int, error) {
	ret := _m.Called(data, token)

	var r0 int
	if rf, ok := ret.Get(0).(func(book.BookCore, int) int); ok {
		r0 = rf(data, token)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(book.BookCore, int) error); ok {
		r1 = rf(data, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DelData provides a mock function with given fields: param, token
func (_m *BookData) DelData(param int, token int) (int, error) {
	ret := _m.Called(param, token)

	var r0 int
	if rf, ok := ret.Get(0).(func(int, int) int); ok {
		r0 = rf(param, token)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(param, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectAll provides a mock function with given fields:
func (_m *BookData) SelectAll() ([]book.BookCore, error) {
	ret := _m.Called()

	var r0 []book.BookCore
	if rf, ok := ret.Get(0).(func() []book.BookCore); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]book.BookCore)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectById provides a mock function with given fields: param
func (_m *BookData) SelectById(param int) (book.BookCore, error) {
	ret := _m.Called(param)

	var r0 book.BookCore
	if rf, ok := ret.Get(0).(func(int) book.BookCore); ok {
		r0 = rf(param)
	} else {
		r0 = ret.Get(0).(book.BookCore)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(param)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateData provides a mock function with given fields: param, token, data
func (_m *BookData) UpdateData(param int, token int, data book.BookCore) (int, error) {
	ret := _m.Called(param, token, data)

	var r0 int
	if rf, ok := ret.Get(0).(func(int, int, book.BookCore) int); ok {
		r0 = rf(param, token, data)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int, book.BookCore) error); ok {
		r1 = rf(param, token, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewBookData interface {
	mock.TestingT
	Cleanup(func())
}

// NewBookData creates a new instance of BookData. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewBookData(t mockConstructorTestingTNewBookData) *BookData {
	mock := &BookData{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
